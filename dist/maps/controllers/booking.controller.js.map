{"version":3,"sources":["controllers/booking.controller.js"],"names":["app","controller","$scope","$state","$rootScope","$toast","$stateParams","$mdDialog","$firebaseObject","$http","today","moment","todayIndex","day","currentWeek","weekIndex","weekStat","startOfWeek","startOf","format","endOfWeek","endOf","dayObjects","console","log","weekIsFree","startTime","endTime","selectedDay","duration","cost","selectedChildren","bookingsLoaded","fetchBookings","ms","bookingsPath","database","child","uid","valueOf","bookings","$loaded","updateDate","date","weekNumber","dayOfMonth","month","dayOfWeek","createDays","i","add","angular","copy","$watch","nextWeek","maxHistory","previousWeek","currentTime","difference","subtract","clear","babysitter","updateAges","children","length","Date","birthday","age","fromNow","book","time","event","createTimes","show","contentElement","parent","element","document","body","targetEvent","clickOutsideToClose","fullscreen","times","key","push","calcDuration","momentDuration","hours","get","minutes","calcCost","diff","pricing","rate","closeDialog","hide","then","confirmBooking","weekMS","dayMS","data","catch","err","error"],"mappings":"AAAAA,IAAIC,WAAW,eAAgB,SAAU,SAAU,aAAc,SAAU,eAAgB,YAAa,kBAAmB,QACvH,SAASC,EAAQC,EAAQC,EAAYC,EAAQC,EAAcC,EAAWC,EAAiBC,GAInFP,EAAOQ,MAAQC,SACfT,EAAOU,WAAaV,EAAOQ,MAAMG,MACjCX,EAAOY,aAAc,EACrBZ,EAAOa,UAAY,EACnBb,EAAOc,UACHC,YAAaN,SAASO,QAAQ,QAAQC,OAAO,SAC7CC,UAAWT,SAASU,MAAM,QAAQF,OAAO,UAE7CjB,EAAOoB,cACPC,QAAQC,IAAItB,EAAOU,YACnBV,EAAOuB,YAAa,EACpBvB,EAAOwB,UAAY,KACnBxB,EAAOyB,QAAU,KACjBzB,EAAO0B,YAAc,KACrB1B,EAAO2B,SAAW,KAClB3B,EAAO4B,KAAO,EACd5B,EAAO6B,iBAAmB,KAC1B7B,EAAO8B,gBAAiB,EAMxB9B,EAAO+B,cAAgB,SAASC,GAC5BhC,EAAO8B,gBAAiB,CACxB,IAAIG,GAAe/B,EAAWgC,SAASC,MAAM,kBAAoB/B,EAAagC,IAAM,IAAM3B,OAAOuB,GAAIhB,QAAQ,QAAQqB,UACrHrC,GAAOsC,SAAWhC,EAAgB2B,GAClCjC,EAAOsC,SAASC,QAAQ,WAChBvC,EAAO8B,gBAAiB,KAQpC9B,EAAOwC,WAAa,SAASC,GACzBzC,EAAO0C,WAAaD,EAAKxB,OAAO,KACR,GAApBjB,EAAOa,WACP4B,EAAKzB,QAAQ,QAEjBhB,EAAO2C,WAAaF,EAAKxB,OAAO,KAChCjB,EAAO4C,MAAQH,EAAKxB,OAAO,OAC3BjB,EAAO6C,UAAYJ,EAAKxB,OAAO,QAC/BjB,EAAO+B,cAAcU,EAAKJ,YAG9BrC,EAAOwC,WAAWxC,EAAOQ,OASzBR,EAAO8C,WAAa,SAASL,GACzBzC,EAAOwC,WAAWC,EAClB,KAAK,GAAIM,GAAI,EAAGA,EAAI,EAAGA,IACnBpC,IAAM8B,EAAKzB,QAAQ,QAAQgC,IAAID,EAAG,QAClC/C,EAAOoB,WAAW2B,IACdF,UAAalC,IAAIM,OAAO,QACxBR,OAAUwC,QAAQC,KAAKvC,KACvBqB,GAAMrB,IAAI0B,UACVI,KAAQ9B,IAAIM,OAAO,UAK/BjB,EAAO8C,WAAWrC,UAElBY,QAAQC,IAAItB,EAAOoB,YAEnBpB,EAAOmD,OAAO,YAAa,WACC,GAApBnD,EAAOa,YACPb,EAAOY,aAAc,KAI7BZ,EAAOoD,SAAW,WAGd,MAAIpD,GAAOa,UAAY,OACnBb,EAAOqD,YAAa,IAGxBrD,EAAOY,aAAc,EACrBZ,EAAOa,WAAa,MAEpBb,GAAO8C,WAAWrC,SAASuC,IAAIhD,EAAOa,UAAW,YAGrDb,EAAOsD,aAAe,WAClB,GAAwB,GAApBtD,EAAOa,UAEP,YADAb,EAAOY,aAAc,EAGzBZ,GAAOqD,YAAa,EAEpBrD,EAAOuD,YAAc9C,SAASuC,IAAIhD,EAAOa,UAAW,KAEpDb,EAAOa,WAAa,CAEpB,IAAI2C,GAAa/C,OAAOT,EAAOuD,aAAaE,SAAS,EAAG,IAExDzD,GAAO8C,WAAWU,IAsBtBnC,QAAQqC,OACR,IAAIC,GAAazD,EAAWgC,SAASC,MAAM,mBAAqB/B,EAAagC,IAC7EpC,GAAO2D,WAAarD,EAAgBqD,GACpCtC,QAAQC,IAAItB,EAAO2D,YAEnB3D,EAAO4D,WAAa,WAChB,IAAK,GAAIb,GAAI,EAAGA,EAAI/C,EAAO6D,SAASC,OAAQf,IAAK,CAC7C,GAAIN,GAAOhC,OAAO,GAAIsD,MAAK/D,EAAO6D,SAASd,GAAGiB,WAC1CC,EAAMxD,OAAOgC,GAAMyB,SAAQ,EAC/BlE,GAAO6D,SAASd,GAAGkB,IAAMA,IAIjC5C,QAAQC,IAAItB,EAAO2D,YACnB3D,EAAOmE,KAAO,SAASC,EAAMC,GACzBrE,EAAO0B,YAAcjB,OAAO2D,GAAMnD,OAAO,UACzCjB,EAAOsE,YAAYF,GACnB/C,QAAQC,IAAI8C,GACZ/D,EAAUkE,MACNC,eAAgB,cAChBC,OAAQxB,QAAQyB,QAAQC,SAASC,MACjCC,YAAaR,EACbS,qBAAqB,EACrBC,YAAY,KASpB/E,EAAOsE,YAAc,SAAS3D,GAC1BX,EAAOW,IAAMA,EACbX,EAAOgF,QACP,KAAK,GAAIjC,GAAI,EAAGA,GAAK,GAAIA,IAAK,CAC1B,GAAIqB,IACApC,GAAMvB,OAAOE,GAAKK,QAAQ,OAAOgC,IAAI,GAAKD,EAAG,KAAKV,UAClDpB,OAAUR,OAAOE,GAAKK,QAAQ,OAAOgC,IAAI,GAAKD,EAAG,KAAK9B,OAAO,WAC7DR,OAAUA,OAAOE,GAAKK,QAAQ,OAAOgC,IAAI,GAAKD,EAAG,KAAK9B,OAAO,WAGjE,KAAIgE,MAAOjF,GAAOsC,SAAS3B,GACpByD,EAAKpC,IAAMhC,EAAOsC,SAAS3B,GAAKsE,KAAKzD,WAAa4C,EAAKpC,IAAMhC,EAAOsC,SAAS3B,GAAKsE,KAAKxD,UACtF2C,EAAa,QAAI,EAGzBpE,GAAOgF,MAAME,KAAKd,GAEtB/C,QAAQC,IAAItB,EAAOgF,QAGvBhF,EAAOmF,aAAe,WAClB,GAAsB,MAAlBnF,EAAOyB,SAAuC,MAApBzB,EAAOwB,UAArC,CAGA,GAAI4D,GAAiB3E,OAAOkB,SAAS3B,EAAOyB,QAAQO,GAAKhC,EAAOwB,UAAUQ,IACtEqD,EAAQD,EAAeE,IAAI,SAC3BC,EAAUH,EAAeE,IAAI,UAE7BD,IAAS,EACLE,EAAU,EACG,GAATF,EACArF,EAAO2B,SAAW0D,EAAQ,aAAeE,EAAU,WAEnDvF,EAAO2B,SAAW0D,EAAQ,cAAgBE,EAAU,WAG3C,GAATF,EACArF,EAAO2B,SAAW0D,EAAQ,QAE1BrF,EAAO2B,SAAW0D,EAAQ,SAIlCrF,EAAO2B,SAAW4D,EAAU,WAEhClE,QAAQC,IAAItB,EAAO2B,UACnB3B,EAAOwF,aAIXxF,EAAOwF,SAAW,WACd,GAA+B,MAA3BxF,EAAO6B,iBAAX,CAGA7B,EAAO4B,KAAO,CAEd,KAAK,GAAImB,GAAI,EAAGA,EAAI/C,EAAO6B,iBAAiBiC,OAAQf,IAAK,CACrD,GAAIkB,GAAMxD,SAASgF,KAAKhF,OAAOT,EAAO6B,iBAAiBkB,GAAGiB,UAAW,QACrE,SAAQ,GACJ,IAAMC,GAAM,GAAKA,EAAM,EAEnBjE,EAAO4B,MAAQ5B,EAAO2D,WAAW+B,QAAQ,GAAGC,IAC5C,MACJ,KAAM1B,GAAM,GAAKA,EAAM,EAEnBjE,EAAO4B,MAAQ5B,EAAO2D,WAAW+B,QAAQ,GAAGC,IAC5C,MACJ,KAAM1B,GAAM,GAAKA,EAAM,EAEnBjE,EAAO4B,MAAQ5B,EAAO2D,WAAW+B,QAAQ,GAAGC,IAC5C,MACJ,KAAM1B,GAAM,GAAKA,EAAM,GAEnBjE,EAAO4B,MAAQ5B,EAAO2D,WAAW+B,QAAQ,GAAGC,IAC5C,MACJ,KAAM1B,GAAM,GAERjE,EAAO4B,MAAQ5B,EAAO2D,WAAW+B,QAAQ,GAAGC,MAMxD3F,EAAO4B,KAAQ5B,EAAO4B,MAAQ5B,EAAOyB,QAAQO,GAAKhC,EAAOwB,UAAUQ,IAAO,KAC1EhC,EAAO2D,WAAW+B,UAItB1F,EAAO4F,YAAc,WACjBvF,EAAUwF,OACLC,KAAK,WACF9F,EAAOwB,UAAY,KACnBxB,EAAOyB,QAAU,KACjBzB,EAAO2B,SAAW,KAClB3B,EAAO4B,KAAO,EACd5B,EAAO6B,iBAAmB,QAItC7B,EAAO+F,eAAiB,WAIpB,GAAIC,GAASvF,OAAOT,EAAOwB,UAAUQ,IAAIhB,QAAQ,QAAQqB,UAErD4D,EAAQxF,OAAOT,EAAOwB,UAAUQ,IAAIhB,QAAQ,OAAOqB,SAEvDnC,GAAWgC,SAASC,MAAM,kBAAoB/B,EAAagC,IAAM,IAAM4D,EAAS,IAAKC,GAChFf,MACG1D,UAAaxB,EAAOwB,UAAUQ,GAC9BP,QAAWzB,EAAOyB,QAAQO,KAE7B8D,KAAK,SAASI,GACX7E,QAAQC,IAAI,oBACZD,QAAQC,IAAI4E,KACbC,MAAM,SAASC,GACd/E,QAAQgF,MAAMD","file":"controllers/booking.controller.js","sourcesContent":["app.controller('bookingCtrl', ['$scope', '$state', '$rootScope', '$toast', '$stateParams', '$mdDialog', '$firebaseObject', '$http',\n    function($scope, $state, $rootScope, $toast, $stateParams, $mdDialog, $firebaseObject, $http) {\n        // =============================================================================================\n        // Date stuff\n        // =============================================================================================\n        $scope.today = moment();\n        $scope.todayIndex = $scope.today.day();\n        $scope.currentWeek = true;\n        $scope.weekIndex = 0;\n        $scope.weekStat = {\n            startOfWeek: moment().startOf('week').format('D-M-Y'),\n            endOfWeek: moment().endOf('week').format('D-M-Y')\n        }\n        $scope.dayObjects = [];\n        console.log($scope.todayIndex);\n        $scope.weekIsFree = false;\n        $scope.startTime = null;\n        $scope.endTime = null;\n        $scope.selectedDay = null;\n        $scope.duration = null;\n        $scope.cost = 0;\n        $scope.selectedChildren = null;\n        $scope.bookingsLoaded = false;\n       \n        /*\n            Fetch bookings for x week from the firebase database\n            @params number ms - pass epoch time of any date of desired week in milliseconds \n        */\n        $scope.fetchBookings = function(ms){\n            $scope.bookingsLoaded = false;\n            var bookingsPath = $rootScope.database.child('publicBookings/' + $stateParams.uid + \"/\" + moment(ms).startOf('week').valueOf());\n            $scope.bookings = $firebaseObject(bookingsPath)\n            $scope.bookings.$loaded(function(){\n                    $scope.bookingsLoaded = true;\n                })\n        }\n\n        /*\n          Update the date, mainly for viewing current week & date purposes\n          @params {object} date - pass a moment object, can be any given date in a week.          \n        */\n        $scope.updateDate = function(date) {\n            $scope.weekNumber = date.format(\"w\");\n            if ($scope.weekIndex != 0) {\n                date.startOf('week');\n            }\n            $scope.dayOfMonth = date.format('D');\n            $scope.month = date.format('MMM');\n            $scope.dayOfWeek = date.format('dddd');\n            $scope.fetchBookings(date.valueOf());\n        }\n\n        $scope.updateDate($scope.today);\n\n         \n\n        /*\n          Creates objects for x week, useful for navigating through weeks\n          @params {object} date - pass a moment object, can be any given date in a week.          \n        */\n        //console.log(`date is ${date} and type is ${typeof date}`);\n        $scope.createDays = function(date) {\n            $scope.updateDate(date);\n            for (var i = 0; i < 7; i++) {\n                day = date.startOf('week').add(i, 'days');\n                $scope.dayObjects[i] = {\n                    \"dayOfWeek\": day.format('dddd'),\n                    \"moment\": angular.copy(day),\n                    \"ms\": day.valueOf(),\n                    \"date\": day.format('D/MM')\n                };\n            }\n        }\n\n        $scope.createDays(moment());\n\n        console.log($scope.dayObjects);\n\n        $scope.$watch('weekIndex', function() {\n            if ($scope.weekIndex == 0) {\n                $scope.currentWeek = true;\n            }\n        });\n\n        $scope.nextWeek = function() {\n            // You can view 8 weeks this way, week with index of 7 will view you everything from\n            // The start of week 7 till the end of it.\n            if ($scope.weekIndex > 6) {\n                $scope.maxHistory = true;\n                return;\n            }\n            $scope.currentWeek = false;\n            $scope.weekIndex += 1;\n\n            $scope.createDays(moment().add($scope.weekIndex, 'weeks'));\n        }\n\n        $scope.previousWeek = function() {\n            if ($scope.weekIndex == 0) {\n                $scope.currentWeek = true;\n                return;\n            }\n            $scope.maxHistory = false;\n            // This will check which week is currently being viewed\n            $scope.currentTime = moment().add($scope.weekIndex, 'w');\n            // Will update the week index \n            $scope.weekIndex -= 1;\n            // Takes the currently viewed week and goes back one week\n            var difference = moment($scope.currentTime).subtract(1, 'w');\n            // Generates the proper days for the week we want to go back to \n            $scope.createDays(difference);\n            //console.log(`Current time is ${$scope.currentTime} and Weekindex is ${$scope.weekIndex}`);\n        }\n\n        //console.log($scope.todayIndex , today.format('D-M-Y'));\n        /*yesterday = moment().day()\n        Will return the index of the week with Sunday as 0 and Saturday as 6\n    \n        for creating past days in CURRENT week\n        Just create moment objects for every single day.\n        You check which day it is today, if its 3, you create a for loop \n        that creates 3 objects and increments a day everytime, you push every\n        object in a 'past array'\n        \n        you also have to create todays object and the upcoming days in that week.\n\n        for moving checking next weeks, you just create 7 new objects\n        how you will do that is currently unknown\n        */\n\n        // =============================================================================================\n\n        console.clear();\n        var babysitter = $rootScope.database.child('babysittersTest/' + $stateParams.uid);\n        $scope.babysitter = $firebaseObject(babysitter);\n        console.log($scope.babysitter);\n\n        $scope.updateAges = function() {\n            for (var i = 0; i < $scope.children.length; i++) {\n                var date = moment(new Date($scope.children[i].birthday));\n                var age = moment(date).fromNow(true);\n                $scope.children[i].age = age;\n            }\n        }\n\n        console.log($scope.babysitter);\n        $scope.book = function(time, event) {\n            $scope.selectedDay = moment(time).format(\"MMMM D\");\n            $scope.createTimes(time);\n            console.log(time);\n            $mdDialog.show({\n                contentElement: '#bookDialog',\n                parent: angular.element(document.body),\n                targetEvent: event,\n                clickOutsideToClose: true,\n                fullscreen: true\n            });\n        };\n\n\n        /*\n          Create an array of objects for the dropdown\n          @params number - pass unix timestamp in seconds of the day you want to generate times for\n        */\n        $scope.createTimes = function(day) {\n            $scope.day = day;\n            $scope.times = [];\n            for (var i = 0; i <= 48; i++) {\n                var time = {\n                    \"ms\": moment(day).startOf('day').add(30 * i, 'm').valueOf(),\n                    \"format\": moment(day).startOf('day').add(30 * i, 'm').format(\"hh:mm A\"),\n                    \"moment\": moment(day).startOf('day').add(30 * i, 'm').format(\"hh:mm A\")\n                }\n                // This will disable already reserved days\n                for(key in $scope.bookings[day]){\n                    if(time.ms >= $scope.bookings[day][key].startTime && time.ms <= $scope.bookings[day][key].endTime){\n                        time['booked'] = true;\n                    }\n                }\n                $scope.times.push(time);\n            }\n            console.log($scope.times);\n        }\n\n        $scope.calcDuration = function() {\n            if ($scope.endTime == null || $scope.startTime == null) {\n                return;\n            }\n            var momentDuration = moment.duration($scope.endTime.ms - $scope.startTime.ms);\n            var hours = momentDuration.get('hours');\n            var minutes = momentDuration.get('minutes');\n            // Longer than an hour\n            if (hours >= 1) {\n                if (minutes > 0) {\n                    if (hours == 1) {\n                        $scope.duration = hours + \" hour and \" + minutes + \" minutes\";\n                    } else {\n                        $scope.duration = hours + \" hours and \" + minutes + \" minutes\";\n                    }\n                } else {\n                    if (hours == 1) {\n                        $scope.duration = hours + \" hour\";\n                    } else {\n                        $scope.duration = hours + \" hours\";\n                    }\n                }\n            } else {\n                $scope.duration = minutes + \" minutes\";\n            }\n            console.log($scope.duration);\n            $scope.calcCost();\n        }\n\n\n        $scope.calcCost = function() {\n            if ($scope.selectedChildren == null) {\n                return;\n            }\n            $scope.cost = 0;\n            // Determine in which age group each child falls\n            for (var i = 0; i < $scope.selectedChildren.length; i++) {\n                var age = moment().diff(moment($scope.selectedChildren[i].birthday), 'years');\n                switch (true) {\n                    case (age > 0 && age < 3):\n                        //Childs age 1 to 2 = a\n                        $scope.cost += $scope.babysitter.pricing[0].rate\n                        break;\n                    case (age > 1 && age < 6):\n                        //Childs age 2 to 5 = b\n                        $scope.cost += $scope.babysitter.pricing[1].rate\n                        break;\n                    case (age > 4 && age < 9):\n                        //Childs age 5 to 8 = c\n                        $scope.cost += $scope.babysitter.pricing[2].rate\n                        break;\n                    case (age > 7 && age < 13):\n                        //Childs age 8 to 12 = d\n                        $scope.cost += $scope.babysitter.pricing[3].rate\n                        break;\n                    case (age > 12):\n                        //Childs age 12 + = e\n                        $scope.cost += $scope.babysitter.pricing[4].rate\n                        break;\n                }\n            }\n            // At this point, we know how much the booking would cost if it would be an hour,\n            // $scope.cost = total of the booking if it would be one hour\n            $scope.cost = ($scope.cost * ($scope.endTime.ms - $scope.startTime.ms)) / 3600000;\n            $scope.babysitter.pricing;\n        }\n\n\n        $scope.closeDialog = function() {\n            $mdDialog.hide()\n                .then(function() {\n                    $scope.startTime = null;\n                    $scope.endTime = null;\n                    $scope.duration = null;\n                    $scope.cost = 0;\n                    $scope.selectedChildren = null;\n                })\n        }\n\n        $scope.confirmBooking = function() {\n            // Testing\n\n            // Week of booking in MS, for showing the bookings later in the UI\n            var weekMS = moment($scope.startTime.ms).startOf('week').valueOf();\n            //Day of booking in MS, for showing the booking later in the ui as well\n            var dayMS = moment($scope.startTime.ms).startOf('day').valueOf();\n\n            $rootScope.database.child('publicBookings/' + $stateParams.uid + '/' + weekMS + '/' +dayMS)\n                .push({\n                    \"startTime\": $scope.startTime.ms,\n                    \"endTime\": $scope.endTime.ms\n                })\n                .then(function(data){\n                    console.log('push successfull');\n                    console.log(data);\n                }).catch(function(err){\n                    console.error(err);\n                })\n                \n\n            return;\n            // Testing end\n\n            $http({\n                method: 'POST',\n                url: 'http://localhost:8080/booking/create',\n                data: {\n                    startTime: $scope.startTime.ms,\n                    endTime: $scope.endTime.ms,\n                    day: $scope.day,\n                    parent: {\n                        id: $scope.currentUser.$id,\n                        street: $scope.currentUser.street,\n                        zipcode: $scope.currentUser.zipCode,\n                        children: $scope.selectedChildren,\n                        email: $scope.currentUser.email,\n                        name: $scope.currentUser.name\n                    },\n                    babysitter: {\n                        id: $stateParams.uid,\n                        email: $scope.babysitter.email,\n                        name: $scope.babysitter.name\n                    }\n                }\n            }).then(function(data) {\n                console.log(data);\n                $toast('Booking successfull');\n                $scope.closeDialog();\n            }).catch(function(err) {\n                $toast('Server error');\n                console.error(err);\n            });\n        }\n\n    }\n])"],"sourceRoot":"/source/"}